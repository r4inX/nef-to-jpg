name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with pytest
      run: |
        pytest -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ubuntu-latest-pip-quality-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Black (Code Formatting)
      run: |
        black --check --diff src tests

    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff src tests

    - name: Run flake8 (Linting)
      run: |
        flake8 src tests

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (Security Linter)
      run: |
        bandit -r src/ -c .bandit -f json -o bandit-report.json || true
        bandit -r src/ -c .bandit

    - name: Run Safety (Dependency Vulnerabilities)
      run: |
        safety check --json --output safety-report.json || true
        safety check

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Check README rendering
      run: |
        python -m pip install readme_renderer
        python -m readme_renderer README.md -o /tmp/readme.html

  deploy-docs:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, code-quality, documentation]
    
    permissions:
      pages: write
      id-token: write
      contents: read

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Build with Jekyll
      uses: actions/jekyll-build-pages@v1
      with:
        source: ./
        destination: ./_site

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, code-quality]
    
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Create source archive
      run: |
        git archive --format=zip --prefix=nef-to-jpg-${{ steps.get_version.outputs.VERSION }}/ HEAD -o nef-to-jpg-${{ steps.get_version.outputs.VERSION }}.zip
        git archive --format=tar.gz --prefix=nef-to-jpg-${{ steps.get_version.outputs.VERSION }}/ HEAD -o nef-to-jpg-${{ steps.get_version.outputs.VERSION }}.tar.gz

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          nef-to-jpg-${{ steps.get_version.outputs.VERSION }}.zip
          nef-to-jpg-${{ steps.get_version.outputs.VERSION }}.tar.gz
        body: |
          ## NEF to JPG Converter v${{ steps.get_version.outputs.VERSION }}
          
          ### üì¶ Installation
          
          ```bash
          # From PyPI (recommended)
          pip install nef-to-jpg-converter==${{ steps.get_version.outputs.VERSION }}
          
          # From source
          pip install nef-to-jpg-${{ steps.get_version.outputs.VERSION }}.tar.gz
          ```
          
          ### üìù Changes
          
          See [CHANGELOG.md](https://github.com/r4inX/nef-to-jpg/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}